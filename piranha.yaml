
global:
  excludePaths:
    - "**/node_modules/**"
    - "**/vendor/**"
    - "**/.git/**"
    - "**/.svn/**"
    - "**/.hg/**"
    - "**/.bzr/**"
    - "**/__pycache__/**"
    - "**/dist/**"
    - "**/build/**"
    - "**/.DS_Store"
    - "piranha.yaml"
  instructionHeader: |+
    I'm going to give you a file or list of files in the codebase for a golang inventory management micro service. Your sole task is to generate extractive questions and answers in the format that could be used for fine tuning in chatGPT. Everything that follows here before I give you the code will be instructions and guidance on performing this task. I want you to give me the output in pure JSONL with no further commentary. Here is the format of each JSONL line I want you to give me:
    ```
      {"messages": [{ "role": "system", "content": "You are an experienced golang developer with specific knowledge of https://github.com/VanAnderson/go-micro-example. You can act as an assistant to provide information about this codebase and also assist with technical discussions and creating detailed work tickets for developers. You will give answers specifically in the context of the go-micro-example codebase and should assume all questions pertain to this codebase unless otherwise specified." },{ "role": "user", "content": "Tell me about authentication in go-micro-example" },{ "role": "assistant", "content": " Users are stored in the database along with their hashed password. Users are locally cached using [golang-lru](https://github.com/hashicorp/golang-lru)." }] }
    ```
    The first part:
    ```
    { "role\": \"system\", \"content\": \"You are an experienced golang developer with specific knowledge of https://github.com/VanAnderson/go-micro-example (or simply go-micro-example). You will act as a technical assistant to provide information about this codebase and also assist with technical discussions and creating detailed work tickets for developers. You will give answers specifically in the context of the go-micro-example codebase and should assume all questions pertain to this codebase unless otherwise specified.\" }
    ```
    Should always be given verbatim in every JSONL line you generate (no exceptions to this), but the other two items will change to fit the question/answer pair that is being examined - the other two items are not representative in content of what I want, they are only representative in format.
  
    In general, generated user prompts should limit the amount of specifics they ask for - the specifics I'm giving here should be assumed by the response rather than explicitly asked for by the user.
  instructionFooter: |+
    **Only give me the raw JSONL in the requested format, please do not include any commentary. If explicitly instructed to, you may return a blank response. **

    # here are the files I want you to analyze:
  llmSettings:
    temperature: 0.3
    max_tokens: 4000
  responseFileFormat: "jsonl"
chunking:
  - id: "single-golang-file-pass"
    paths:
      - "**/*.go"
    excludePaths: []
    divisibility: "INDIVIDUAL"
    instructionsHeader: |+
      For files that contain code, I want you to examine each individual method, struct, interface, and config to come up with prompts that will demonstrate both conceptual knowledge of the code, as well as concrete knowledge about the implementation.
      Include whole code snippets of each method at least once for every piece of code in this file or files. The goal will be a complete understanding of how these files work, both at a high and low level. Every line of code should be accounted for. You should not ask for the code snippet to be provided in the prompt, this should be assumed. 
      Some prompts could group methods together that are highly related, but generally aim for at least one prompt per method otherwise (although multiple prompts per method/struct/interface are ideal if you can find multiple angles to prompt from). Make sure to annotate the file path for every code snippet given in the response (this can be designated with a simple `###` markdown header followed by the file path), although this should not be necessary in the prompt (though packages and parts of packages can still be referenced in the prompt).
    responseFileFormat: "txt"
  - id: "documentation-pass-single-file"
    paths:
      - "**/*.go"
    excludePaths: []
    divisibility: "INDIVIDUAL"
    instructionsHeader: |+
      Here are three templates for interface, struct, and function documentation. If and only if this file defines a struct, interface, methods on a struct/interface, or individual function, I want you to generate extractive questions and answers where a user asks for documentation of a particular entity in the context of a package, then reply with the proper documentation with one of these templates.
      You should only use the function documentation if the function is not a method on a struct or interface.
      **IF THE FILE OR FILES DO NOT CONTAIN A STRUCT OR INTERFACE OR INDIVIDUAL FUNCTION, YOU MAY OUTPUT A BLANK RESPONSE WITH NOTHING IN IT**
      
      ```
        ## Struct Documentation
      
        ### `TypeName`
      
        **Description:**
      
        `TypeName` represents a ... It is used to ...
      
        **Fields:**
      
        - `FieldName`: The ... It is used for ...
      
        **Constructors:**
      
        #### `NewTypeName(param1 ParamType1, param2 ParamType2) *TypeName`
      
        Creates a new instance of `TypeName`. It initializes the struct with the given parameters.
      
        **Parameters:**
      
        - `param1` (ParamType1): The first parameter used for ...
        - `param2` (ParamType2): The second parameter used for ...
      
        **Returns:**
      
        - A pointer to a newly allocated `TypeName` with fields initialized.
      
        **Methods:**
      
        #### `MethodName(param1 ParamType1, param2 ParamType2) (returnType, error)`
      
        Performs a specific operation on `TypeName`.
      
        **Parameters:**
      
        - `param1` (ParamType1): The first parameter used for ...
        - `param2` (ParamType2): The second parameter used for ...
      
        **Returns:**
      
        - `returnType`: Description of the return value.
        - `error`: Any error that occurred during the operation, or `nil` if no error occurred.

      ## Interface Documentation
      
      ### `InterfaceName`
      
      **Description:**
      
      `InterfaceName` defines the behavior for ... It is implemented by types that need to ...
      
      **Methods:**
      
      #### `MethodName(param1 ParamType1, param2 ParamType2) (returnType, error)`
      
      Performs an action. It is used to ...
      
      **Parameters:**
      
      - `param1` (ParamType1): The first parameter used for ...
      - `param2` (ParamType2): The second parameter used for ...
      
      **Returns:**
      
      - `returnType`: Description of the return value.
      - `error`: Any error that occurred during the operation, or `nil` if no error occurred.
      
      ### Implementations
      
      #### `ImplementingTypeName`
      
      **Description:**
      
      `ImplementingTypeName` is a struct that implements `InterfaceName`. It has the following properties and behaviors...
      
      **Methods:**
      
      #### `MethodName(param1 ParamType1, param2 ParamType2) (returnType, error)`
      
      Implements the `InterfaceName.MethodName` for `ImplementingTypeName`.
      
      **Parameters:**
      
      - `param1` (ParamType1): The first parameter used for ...
      - `param2` (ParamType2): The second parameter used for ...
      
      **Returns:**
      
      - `returnType`: Description of the return value.
      - `error`: Any error that occurred during the operation, or `nil` if no error occurred.
      ## Function Documentation
      
      ### `FunctionName`
      
      **Description:**
      
      `FunctionName` performs a specific operation or calculation. It is used to ...
      
      **Parameters:**
      
      - `param1` (ParamType1): Description of the first parameter and its purpose.
      - `param2` (ParamType2): Description of the second parameter and its purpose.
      - ... (additional parameters as needed)
      
      **Returns:**
      
      - `returnType`: Description of the return value and what it represents.
      - `error`: Description of the error returned, if applicable, or `nil` if no error occurred.
      
      **Example:**
      
      ```go
      result, err := FunctionName(param1, param2)
      if err != nil {
          // Handle error
      }
      // Use result
      ```
      
      **Notes:**
      
      - Additional notes or considerations regarding the function's behavior, side effects, or usage in certain contexts.
      ```
    responseFileFormat: "txt"
  - id: "hexagonal-architecture-example"
    paths:
      - "core/**/*.go"
      - "core/**/*.db"
      - "README.md"
    excludePaths: []
    divisibility: "CHUNK"
    instructionsHeader: |+
      For these files, I want you to generate a large list of extractive questions and answers that focus on how the codebase in these files reflects the concepts of a hexagonal architecture.
      You should be able to find many different angles to prompt from, and you should be able to generate many questions and answers from each angle.
      In particular, the interace of the core package and the db package should be a focus of the prompts, as well as the implementation of the core package. 
      The question and response pairs should crystalize aspects of hexagonal architecture and (importantly) how it's realized in this codebase.
    responseFileFormat: "txt"
  - id: "docker-setup"
    paths:
      - "Dockerfile"
      - "docker-compose.yml"
      - "config.yml"
      - "config_test.go"
      - "README.md"
    excludePaths: []
    divisibility: "CHUNK"
    instructionsHeader: |+
      For these files, I want you to generate a large list of extractive questions and answers that focus on the Docker setup.
      Examine these files with questions and responses that give perspectives on how the local setup is configured, how the Dockerfile is configured, and how the docker-compose.yml file is configured.
    responseFileFormat: "txt"
instruction:
  - paths:
    - "**/*.go"
    chunkIdFilter:
      - "single-golang-file-pass"
      - "hexagonal-architecture-example"
    promptInstruction: |+
      Most responses should have code snippets whenever they can provide useful context. Forego code snippets only when dealing with purely conceptual topics. Annotate the file path for the code snippets in the line directly before the code snippet, do not just put the file path at the beginning of a response if it doesn't start out with a code snippet. So every time you give a code snippet it should be:
  
      [descriptive text about whatever]
  
      ### path/to/file.go
      ```golang
      [codesnippet]
      ```
  
      Give the file path for each snippet directly before the snippet is provided on the line before. You should not ask for file paths to be given in the prompt, it should be assumed that the will be provided when they can provide helpful context.
execution:
  concurrency: 3
extraction:
  savePrompts: true
  promptsFolder: "./prompts"
  saveResponses: true
  responsesFolder: "./responses"
  saveAggregateResponse: true
  aggregateResponsePath: "./aggregate_responses.jsonl"
  aggregateResponseFileFormat: "jsonl"